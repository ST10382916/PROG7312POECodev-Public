@model MunicipalServicesMVP.Models.IssueReport[]
@{
    ViewData["Title"] = ViewBag.Title ?? "All Reported Issues";
    var totalCount = ViewBag.TotalCount ?? 0;
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h2 class="text-primary mb-1">
                        All Reported Issues
                    </h2>
                </div>
                <div>
                    <a href="@Url.Action("ReportIssue", "Issue")" class="btn btn-primary me-2">
                        Report New Issue
                    </a>
                    <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
                        Main Menu
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">
                        Filter Issues
                    </h5>
                    <div class="row">
                        <div class="col-md-3">
                            <select id="statusFilter" class="form-select">
                                <option value="">All Status</option>
                                <option value="Submitted">Submitted</option>
                                <option value="Under Review">Under Review</option>
                                <option value="Resolved">Resolved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select id="priorityFilter" class="form-select">
                                <option value="">All Priorities</option>
                                <option value="1">Low Priority</option>
                                <option value="2">Medium Priority</option>
                                <option value="3">High Priority</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input type="text" id="searchBox" class="form-control" placeholder="Search description or location...">
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                                Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Issues List -->
    <div class="row">
        <div class="col-12">
            @if (Model != null && Model.Length > 0)
            {
                <div id="issuesContainer">
                    @foreach (var issue in Model.OrderByDescending(i => i.SubmittedAt))
                    {
                        <div class="card mb-3 issue-card" 
                             data-status="@issue.GetStatusText()" 
                             data-priority="@issue.Priority"
                             data-search="@(issue.Description.ToLower() + " " + issue.Location.ToString().ToLower())">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <h5 class="mb-0 me-3">
                                        @issue.IssueId.ToString("D6")
                                    </h5>
                                    <span class="badge @GetStatusBadgeClass(issue.CurrentStatus) me-2">
                                        @issue.GetStatusText()
                                    </span>
                                    <span class="badge @GetPriorityBadgeClass(issue.Priority)">
                                        @issue.GetPriorityText() Priority
                                    </span>
                                </div>
                                <div class="text-muted">
                                    @issue.SubmittedAt.ToString("dd MMM yyyy HH:mm")
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <h6 class="text-primary mb-2">
                                            @(issue.Category?.Name ?? "Unknown Category")
                                        </h6>
                                        <p class="card-text mb-2">
                                            @if (issue.Description.Length > 200)
                                            {
                                                @issue.Description.Substring(0, 200)<text>...</text>
                                            }
                                            else
                                            {
                                                @issue.Description
                                            }
                                        </p>
                                        <div class="text-muted mb-2">
                                            <strong>Location:</strong> @issue.Location.ToString()
                                        </div>
                                        <div class="text-muted">
                                            <strong>Reporter:</strong> Anonymous User
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="issue-stats">
                                            <div class="stat-item mb-2">
                                                <strong>Attachments:</strong> @issue.Attachments.Count files
                                            </div>
                                            @if (issue.LastUpdated.HasValue)
                                            {
                                                <div class="stat-item mb-2">
                                                    <strong>Last Updated:</strong> @issue.LastUpdated.Value.ToString("dd MMM yyyy")
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(issue.AdminNotes))
                                            {
                                                <div class="stat-item">
                                                    <strong>Admin Notes:</strong> 
                                                    <small class="d-block text-muted">@issue.AdminNotes</small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Action Buttons -->
                                <div class="mt-3 pt-3 border-top">
                                    <a href="@Url.Action("IssueDetails", "Issue", new { id = issue.IssueId })" 
                                       class="btn btn-outline-primary btn-sm me-2">
                                        View Details
                                    </a>
                                    
                                    
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- No Results Message (Hidden by default) -->
                <div id="noResults" class="text-center py-5" style="display: none;">
                    <h4 class="text-muted">No Issues Found</h4>
                    <p class="text-muted">Try adjusting your filters or search terms.</p>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="text-center py-5">
                    <h3 class="text-muted mb-3">No Issues Reported Yet</h3>
                    <p class="text-muted mb-4">Be the first to report an issue and help improve our community!</p>
                    <a href="@Url.Action("ReportIssue", "Issue")" class="btn btn-primary btn-lg">
                        Report Your First Issue
                    </a>
                </div>
            }
        </div>
    </div>

</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Filter functionality
            $('#statusFilter, #priorityFilter').on('change', filterIssues);
            $('#searchBox').on('input', debounce(filterIssues, 300));
        });
        
        function filterIssues() {
            var statusFilter = $('#statusFilter').val();
            var priorityFilter = $('#priorityFilter').val();
            var searchTerm = $('#searchBox').val().toLowerCase();
            
            var visibleCount = 0;
            
            $('.issue-card').each(function() {
                var card = $(this);
                var status = card.data('status');
                var priority = card.data('priority').toString();
                var searchData = card.data('search');
                
                var showCard = true;
                
                // Status filter
                if (statusFilter && status !== statusFilter) {
                    showCard = false;
                }
                
                // Priority filter
                if (priorityFilter && priority !== priorityFilter) {
                    showCard = false;
                }
                
                // Search filter
                if (searchTerm && !searchData.includes(searchTerm)) {
                    showCard = false;
                }
                
                if (showCard) {
                    card.show();
                    visibleCount++;
                } else {
                    card.hide();
                }
            });
            
            // Show/hide no results message
            if (visibleCount === 0) {
                $('#noResults').show();
            } else {
                $('#noResults').hide();
            }
        }
        
        function clearFilters() {
            $('#statusFilter, #priorityFilter').val('');
            $('#searchBox').val('');
            $('.issue-card').show();
            $('#noResults').hide();
        }
        
        
        
        
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
}

@section Styles {
    <style>
        .issue-card {
            transition: box-shadow 0.2s;
        }
        
        .issue-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        
        .stat-item {
            font-size: 0.9em;
        }
        
        .badge {
            font-size: 0.8em;
        }
        
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
        }
        
        .issue-stats {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }
    </style>
}

@functions {
    string GetStatusBadgeClass(MunicipalServicesMVP.Models.IssueStatusType status)
    {
        return status switch
        {
            MunicipalServicesMVP.Models.IssueStatusType.Submitted => "bg-warning text-dark",
            MunicipalServicesMVP.Models.IssueStatusType.UnderReview => "bg-info",
            MunicipalServicesMVP.Models.IssueStatusType.Resolved => "bg-success",
            MunicipalServicesMVP.Models.IssueStatusType.Rejected => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            1 => "bg-secondary",
            2 => "bg-warning text-dark",
            3 => "bg-danger",
            _ => "bg-light text-dark"
        };
    }
}
