@model MunicipalServicesMVP.Models.IssueReport
@{
    ViewData["Title"] = ViewBag.Title ?? $"Issue Details - #{Model?.IssueId.ToString("D6")}";
}

<div class="container">
    @if (Model != null)
    {
        <!-- Header Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div>
                        <h2 class="text-primary mb-1">
                            Issue Details
                        </h2>
                        <p class="text-muted mb-0">Reference: <strong>#@Model.IssueId.ToString("D6")</strong></p>
                    </div>
                    <div>
                        <a href="@Url.Action("ViewIssues", "Issue")" class="btn btn-outline-secondary me-2">
                            All Issues
                        </a>
                        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
                            Main Menu
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Main Details Column -->
            <div class="col-12">
                <!-- Status and Priority Card -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            Issue Status
                        </h5>
                        <div>
                            <span class="badge @GetStatusBadgeClass(Model.CurrentStatus) me-2 fs-6">
                                @Model.GetStatusText()
                            </span>
                            <span class="badge @GetPriorityBadgeClass(Model.Priority) fs-6">
                                @Model.GetPriorityText() Priority
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary mb-2">Category</h6>
                                <p class="mb-3">
                                    @(Model.Category?.Name ?? "Unknown Category")
                                    @if (!string.IsNullOrEmpty(Model.Category?.Description))
                                    {
                                        <br><small class="text-muted">@Model.Category.Description</small>
                                    }
                                </p>
                                
                                <h6 class="text-primary mb-2">Submitted</h6>
                                <p class="mb-3">
                                    @Model.SubmittedAt.ToString("dddd, dd MMMM yyyy 'at' HH:mm")
                                </p>
                            </div>
                            <div class="col-md-6">
                                @if (Model.LastUpdated.HasValue)
                                {
                                    <h6 class="text-primary mb-2">Last Updated</h6>
                                    <p class="mb-3">
                                        @Model.LastUpdated.Value.ToString("dddd, dd MMMM yyyy 'at' HH:mm")
                                    </p>
                                }
                                
                                @if (!string.IsNullOrEmpty(Model.Category?.ResponsibleDepartment))
                                {
                                    <h6 class="text-primary mb-2">Responsible Department</h6>
                                    <p class="mb-3">
                                        @Model.Category.ResponsibleDepartment
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Description Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            Issue Description
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="issue-description">
                            @Html.Raw(Model.Description.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>

                <!-- Location Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            Location Details
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary">Address</h6>
                                <p class="mb-2">@Model.Location.Address</p>
                                
                                @if (!string.IsNullOrEmpty(Model.Location.Area))
                                {
                                    <h6 class="text-primary">Area/Suburb</h6>
                                    <p class="mb-2">@Model.Location.Area</p>
                                }
                            </div>
                            <div class="col-md-6">
                                @if (!string.IsNullOrEmpty(Model.Location.City))
                                {
                                    <h6 class="text-primary">City</h6>
                                    <p class="mb-2">@Model.Location.City</p>
                                }
                                
                                @if (!string.IsNullOrEmpty(Model.Location.PostalCode))
                                {
                                    <h6 class="text-primary">Postal Code</h6>
                                    <p class="mb-2">@Model.Location.PostalCode</p>
                                }
                            </div>
                        </div>
                        
                        <div class="mt-3 p-3 bg-light rounded">
                            <strong>Full Location:</strong> @Model.Location.ToString()
                        </div>
                    </div>
                </div>

                <!-- Attachments Card -->
                @if (Model.Attachments.Count > 0)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                Attachments (@Model.Attachments.Count)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @{
                                    var attachments = Model.Attachments.GetAll();
                                    var images = Model.Attachments.GetImageFiles();
                                    var documents = Model.Attachments.GetDocumentFiles();
                                }
                                
                                @if (images.Length > 0)
                                {
                                    <div class="col-12 mb-4">
                                        <h6 class="text-primary mb-3">
                                            Images (@images.Length)
                                        </h6>
                                        <div class="row">
                                            @foreach (var image in images)
                                            {
                                                <div class="col-md-4 mb-3">
                                                    <div class="attachment-item">
                                                        <div class="attachment-preview bg-light rounded p-3 text-center">
                                                            <h6 class="mb-1">@image.FileName</h6>
                                                            <small class="text-muted">@((image.FileSize / 1024.0 / 1024.0).ToString("F2")) MB</small>
                                                            <div class="mt-2">
                                                                @if (!string.IsNullOrEmpty(image.FilePath))
                                                                {
                                                                    <a href="@image.FilePath" target="_blank" class="btn btn-outline-primary btn-sm">
                                                                        View
                                                                    </a>
                                                                }
                                                                <button class="btn btn-outline-secondary btn-sm" 
                                                                        onclick="downloadFile('@image.FileName', '@image.FilePath')">
                                                                    Download
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                
                                @if (documents.Length > 0)
                                {
                                    <div class="col-12">
                                        <h6 class="text-primary mb-3">
                                            Documents (@documents.Length)
                                        </h6>
                                        <div class="list-group">
                                            @foreach (var document in documents)
                                            {
                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div class="d-flex align-items-center">
                                                        <i class="@GetFileIcon(document.GetFileExtension()) fa-2x me-3"></i>
                                                        <div>
                                                            <h6 class="mb-1">@document.FileName</h6>
                                                            <small class="text-muted">
                                                                @((document.FileSize / 1024.0 / 1024.0).ToString("F2")) MB | 
                                                                Uploaded: @document.UploadTime.ToString("dd MMM yyyy HH:mm")
                                                            </small>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        @if (!string.IsNullOrEmpty(document.FilePath))
                                                        {
                                                            <a href="@document.FilePath" target="_blank" class="btn btn-outline-primary btn-sm me-2">
                                                                View
                                                            </a>
                                                        }
                                                        <button class="btn btn-outline-secondary btn-sm" 
                                                                onclick="downloadFile('@document.FileName', '@document.FilePath')">
                                                            Download
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="mt-3 text-muted">
                                Total attachment size: @Model.Attachments.GetTotalSizeFormatted()
                            </div>
                        </div>
                    </div>
                }

                <!-- Admin Notes (if any) -->
                @if (!string.IsNullOrEmpty(Model.AdminNotes))
                {
                    <div class="card mb-4">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">
                                Administrative Notes
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-warning mb-0">
                                @Html.Raw(Model.AdminNotes.Replace("\n", "<br>"))
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
    }
    else
    {
        <!-- Error State -->
        <div class="text-center py-5">
            <h3 class="text-muted mb-3">Issue Not Found</h3>
            <p class="text-muted mb-4">The requested issue could not be found or may have been removed.</p>
            <a href="@Url.Action("ViewIssues", "Issue")" class="btn btn-primary">
                View All Issues
            </a>
        </div>
    }
</div>

@section Scripts {
    <script>
        
        function downloadFile(fileName, filePath) {
            if (filePath) {
                var link = document.createElement('a');
                link.href = filePath;
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showTooltip('Download started: ' + fileName);
            } else {
                alert('File not available for download.');
            }
        }
        
        
        
    </script>
}

@section Styles {
    <style>
        .issue-description {
            font-size: 1.1em;
            line-height: 1.6;
            padding: 10px 0;
        }
        
        .attachment-item {
            transition: transform 0.2s;
        }
        
        .attachment-item:hover {
            transform: translateY(-2px);
        }
        
        .attachment-preview {
            border: 2px dashed #dee2e6;
            transition: border-color 0.2s;
        }
        
        .attachment-preview:hover {
            border-color: #007bff;
        }
        
        
        .card {
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        @@media print {
            .btn, .alert-info, .card-header {
                display: none !important;
            }
        }
    </style>
}

@functions {
    string GetStatusBadgeClass(MunicipalServicesMVP.Models.IssueStatusType status)
    {
        return status switch
        {
            MunicipalServicesMVP.Models.IssueStatusType.Submitted => "bg-warning text-dark",
            MunicipalServicesMVP.Models.IssueStatusType.UnderReview => "bg-info",
            MunicipalServicesMVP.Models.IssueStatusType.Resolved => "bg-success",
            MunicipalServicesMVP.Models.IssueStatusType.Rejected => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            1 => "bg-secondary",
            2 => "bg-warning text-dark",
            3 => "bg-danger",
            _ => "bg-light text-dark"
        };
    }
    
    string GetFileIcon(string extension)
    {
        return extension switch
        {
            ".pdf" => "fas fa-file-pdf text-danger",
            ".doc" or ".docx" => "fas fa-file-word text-primary",
            ".txt" => "fas fa-file-alt text-secondary",
            _ => "fas fa-file text-muted"
        };
    }
}
